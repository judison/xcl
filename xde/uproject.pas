(*
   XDE - XCL's Development Environment
   Copyright (C) 2005-2006 Judison Oliveira Gil Filho <judison@gmail.com>

   See the file COPYING, included in this distribution,
   for details about the copyright.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
*)
unit uproject;

{$H+}
{$IFDEF FPC}
  {$MODE ObjFpc}
{$ENDIF}

interface

uses Classes, SysUtils;

type
  TItemKind = (ikUnknow, ikProjSource, ikUnit, ikForm, ikInclude, ikResource);

  TProjectItem = class
  private
    FFileName: String;
    FKind: TItemKind;
  protected
  public
    constructor Create(AFileName: String; AKind: TItemKind); virtual;
    property Kind: TItemKind read FKind;
    property FileName: String read FFileName;
  end;

  TProject = class
  private
    FName: String;
    FFileName: String;
    FItems: TList;
    procedure SetName(AValue: String);
  protected
  public
    constructor Create(); virtual;
    destructor Destroy; override;
    //===
    procedure New(AName: String);
    procedure Load(AFileName: String);
    procedure SaveAs(AFileName: String);
    procedure Save;
    //===
    procedure AddItem(AFileName: String);
    procedure AddItem(AFileName: String; AKind: TItemKind);
    procedure AddItem(AItem: TProjectItem);
    function GetItem(AIdx: Integer): TProjectItem;
    function ItemCount: Integer;
    //===
    property Item[AIdx: Integer]: TProjectItem read GetItem;
    property Name: String read FName write SetName;
  end;

implementation

{ TProjectItem }

constructor TProjectItem.Create(AFileName: String; AKind: TItemKind);
begin
  FFileName := AFileName;
  FKind := AKind;
end;

{ TProject }

constructor TProject.Create();
begin
  FItems := TList.Create;
end;

procedure TProject.New(AName: String);
begin
  FName := AName;
  FFileName := AName+'.prj'; // what about .xpr ?
end;

procedure TProject.Load(AFileName: String);
begin
  FFileName := AFileName;
  FName := ChangeFileExt(ExtractFileName(AFileName), '');
end;

procedure TProject.SaveAs(AFileName: String);
begin
  FFileName := AFileName;
  FName := ChangeFileExt(ExtractFileName(AFileName), '');
  Save;
end;

procedure TProject.Save;
var
  SL: TStringList;
  FullName: String;
  FullPath: String;
  I: Integer;
  procedure Add(PI: TProjectItem);
  var
    S: String;
  begin
    case PI.Kind of
      ikProjSource: S := 'PRJ ';
      ikUnit:       S := 'PAS ';
      ikForm:       S := 'FRM ';
      ikInclude:    S := 'INC ';
      ikResource:   S := 'RES ';
      else          S := 'UNK ';
    end;
    S := S + ExtractRelativePath(FullPath, ExpandFileName(PI.FileName));
    SL.Add(S);
  end;
begin
  FullName := ExpandFileName(FFileName);
  FullPath := ExtractFilePath(FullName);
  SL := TStringList.Create;
  try
    SL.Add('# XDE Project File');
    SL.Add('# Do not edit this file, unless you know what you are doing.');
    for I := 0 to ItemCount -1 do
      Add(Item[I]);
    SL.SaveToFile(FullName);
  finally
    SL.Free;
  end;
end;

destructor TProject.Destroy;
begin
  inherited;
end;

procedure TProject.SetName(AValue: String);
begin
  if FName <> AValue then
  begin
    FName := AValue;
  end;
end;

procedure TProject.AddItem(AFileName: String);
var
  Ext: String;
  K: TItemKind;
begin
  Ext := UpperCase(ExtractFileExt(AFileName));
  if (ext = '.pas') or (ext = '.pp') then
    if FileExists(ChangeFileExt(AFileName, '.frm')) then
      K := ikForm
    else
      K := ikUnit
  else if ext = '.inc' then
    K := ikInclude
  else if (ext = '.xpm') or (ext = '.png') or (ext = '.bmp') or (ext = '.str') then
    K := ikResource
  else
    K := ikUnknow;
  AddItem(TProjectItem.Create(AFileName, K));
end;

procedure TProject.AddItem(AFileName: String; AKind: TItemKind);
begin
  AddItem(TProjectItem.Create(AFileName, AKind));
end;

procedure TProject.AddItem(AItem: TProjectItem);
begin
  FItems.Add(AItem);
end;

function TProject.GetItem(AIdx: Integer): TProjectItem;
begin
  Result := TProjectItem(FItems[AIdx]);
end;

function TProject.ItemCount: Integer;
begin
  Result := FItems.Count;
end;

end.