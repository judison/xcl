(*
   $Id: scintilla.tmpl,v 1.3 2005/12/27 03:14:10 judison Exp $

   XCL TScintilla Component
   Copyright (C) 2005 Judison Oliveira Gil Filho (judison@gmail.com)

   See the file COPYING.FPC, included in this distribution,
   for details about the copyright.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
*)


unit scintilla;

{$H+}
{$MODE ObjFpc}

interface

uses Classes, SysUtils, xcl;

const
{$IFDEF WIN32}
  sctlib = 'GtkSci.dll';
{$ELSE}
  sctlib = 'scintilla';
//  sctlib = '';
{$ENDIF}


{LINK scintilla.a}
{LINKLIB stdc++}
{LINKLIB c}

type
  TCharAddedEvent = procedure(Self: TObject; AChar: Integer) of object;

  TScintilla = class(TControl)
  private
    FOnCharAdded: TCharAddedEvent;
    FOnSavePointReached: TNotifyEvent;
    FOnSavePointLeft: TNotifyEvent;
  protected
    procedure CreateHandle; override;
    procedure ConnectSignals; override;
    procedure DoCharAdded(AChar: Integer); virtual;
    procedure DoSavePointReached; virtual;
    procedure DoSavePointLeft; virtual;
  public
    // Auto Generated Section
%defs%  public
    // These functions overload some Scintilla ones to use in properties:
    function GetText: String;
    function GetSelText: String;
  public
    // Properties
    property Text: String read GetText write SetText;
    property SelText: String read GetSelText;
  published
    property OnCharAdded: TCharAddedEvent read FOnCharAdded write FOnCharAdded;
    property OnSavePointReached: TNotifyEvent read FOnSavePointReached write FOnSavePointReached;
    property OnSavePointLeft: TNotifyEvent read FOnSavePointLeft write FOnSavePointLeft;
  end;

const
%const%


//var
//  lmPascal: Pointer; external name 'lmPascal';
//  lmCPP: Pointer; external name 'lmCPP';

//function Scintilla_LinkLexers(): Integer; cdecl; external sctlib name '_Z20Scintilla_LinkLexersv';


implementation

uses glib2, gtk2;

function scintilla_get_type: dword; cdecl; external sctlib;
function scintilla_new: Pointer; cdecl; external sctlib;
procedure scintilla_set_id(sci:Pointer; id:longint); cdecl; external sctlib;
function scintilla_send_message(sci: Pointer; iMessage: dword; wParam: dword; lParam: longint): longint; cdecl; external sctlib;
procedure scintilla_release_resources; cdecl; external sctlib;

const
  SCN_STYLENEEDED = 2000;
  SCN_CHARADDED = 2001;
  SCN_SAVEPOINTREACHED = 2002;
  SCN_SAVEPOINTLEFT = 2003;
  SCN_MODIFYATTEMPTRO = 2004;
  SCN_KEY = 2005;
  SCN_DOUBLECLICK = 2006;
  SCN_UPDATEUI = 2007;
  SCN_MODIFIED = 2008;
  SCN_MACRORECORD = 2009;
  SCN_MARGINCLICK = 2010;
  SCN_NEEDSHOWN = 2011;
  SCN_PAINTED = 2013;
  SCN_USERLISTSELECTION = 2014;
  SCN_URIDROPPED = 2015;
  SCN_DWELLSTART = 2016;
  SCN_DWELLEND = 2017;
  SCN_ZOOM = 2018;
  SCN_HOTSPOTCLICK = 2019;
  SCN_HOTSPOTDOUBLECLICK = 2020;
  SCN_CALLTIPCLICK = 2021;


type
  TSCNotifyHeader = record
    hwndFrom: pointer;
    idFrom: dword;
    code: dword;
  end;

  PSCNotification = ^TSCNotification;
  TSCNotification = record
    header: TSCNotifyHeader;
    position: longint;            { SCN_STYLENEEDED, SCN_MODIFIED, SCN_DWELLSTART, SCN_DWELLEND }
    ch: longint;                  { SCN_CHARADDED, SCN_KEY }
    modifiers: longint;           { SCN_KEY }
    modificationType: longint;    { SCN_MODIFIED }
    text: PChar;                  { SCN_MODIFIED }
    length: longint;              { SCN_MODIFIED }
    linesAdded: longint;          { SCN_MODIFIED }
    message: longint;             { SCN_MACRORECORD }
    wParam: dword;                { SCN_MACRORECORD }
    lParam: longint;              { SCN_MACRORECORD }
    line: longint;                { SCN_MODIFIED }
    foldLevelNow: longint;        { SCN_MODIFIED }
    foldLevelPrev: longint;       { SCN_MODIFIED }
    margin: longint;              { SCN_MARGINCLICK }
    listType: longint;            { SCN_USERLISTSELECTION }
    x: longint;                   { SCN_DWELLSTART, SCN_DWELLEND }
    y: longint;                   { SCN_DWELLSTART, SCN_DWELLEND }
  end;


procedure hnd_sci_notify(AHandle: Pointer; wParam: dword; SCN: PSCNotification; AData: Pointer); cdecl;
var
  Obj: TScintilla;
begin
  Obj := TScintilla(ControlByHandle(AHandle));
  case SCN^.header.code of
//    SCN_STYLENEEDED:       Obj.DoStyleNeeded(SCN^.position);
    SCN_CHARADDED:         Obj.DoCharAdded(SCN^.ch);
    SCN_SAVEPOINTREACHED:  Obj.DoSavePointReached;
    SCN_SAVEPOINTLEFT:     Obj.DoSavePointReached;
//    SCN_MODIFYATTEMPTRO:
//    SCN_KEY:
//    SCN_DOUBLECLICK:
//    SCN_UPDATEUI:
//    SCN_MODIFIED:
//    SCN_MACRORECORD:
//    SCN_MARGINCLICK:
//    SCN_NEEDSHOWN:
//    SCN_PAINTED:
//    SCN_USERLISTSELECTION:
//    SCN_URIDROPPED:
//    SCN_DWELLSTART:
//    SCN_DWELLEND:
//    SCN_ZOOM:
//    SCN_HOTSPOTCLICK:
//    SCN_HOTSPOTDOUBLECLICK:
//    SCN_CALLTIPCLICK:
  end;
end;

{ TScintilla }

procedure TScintilla.CreateHandle;
begin
  Handle := scintilla_new;
  gtk_widget_set_usize(Handle, 160, 120);
  scintilla_set_id(Handle, 0);
end;

procedure TScintilla.ConnectSignals;
begin
  inherited;
  g_signal_connect(Handle, 'sci-notify', TGCallBack(@hnd_sci_notify), nil);
end;

procedure TScintilla.DoCharAdded(AChar: Integer);
begin
  if Assigned(FOnCharAdded) then
    FOnCharAdded(Self, AChar);
end;

procedure TScintilla.DoSavePointReached;
begin
  if Assigned(FOnSavePointReached) then
    FOnSavePointReached(Self);
end;

procedure TScintilla.DoSavePointLeft;
begin
  if Assigned(FOnSavePointLeft) then
    FOnSavePointLeft(Self);
end;

function TScintilla.GetText: String;
var
  L: Integer;
  S: String;
begin
  L := GetTextLength();
  SetLength(S, L+1);
  GetText(L+1, PChar(S));
  Result := S;
end;

function TScintilla.GetSelText: String;
var
  S: String;
  L: LongInt;
begin
  L := GetSelectionEnd() - GetSelectionStart();
  SetLength(S, L);
  GetSelText(PChar(S));
  Result := S;
end;

//=============================================================================
// Auto Generated Code Start
%impl%
// Auto Generated Code End
//=============================================================================

begin
  RegisterClass(TScintilla);
  
  //WriteLn(Scintilla_LinkLexers());
  //WriteLn(Integer(lmPascal));
end.

{
  $Log: scintilla.tmpl,v $
  Revision 1.3  2005/12/27 03:14:10  judison
  *** empty log message ***

  Revision 1.2  2005/12/17 21:48:30  judison
  *** empty log message ***

  Revision 1.1.1.1  2005/12/17 17:29:48  judison
  Initial Import

  Revision 1.3  2005/12/12 01:34:59  judison
  Failed try to dynamic link in win32

  Revision 1.2  2005/12/09 02:39:57  judison
  Using shared Scintilla

  Revision 1.1  2005/12/08 22:48:34  judison
  Added Scintilla support

}
